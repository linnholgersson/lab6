package map;


public class SimpleHashMap<K, V> implements Map<K, V> {

	private static final double loadFactor = 0.75;
	private Entry<K, V>[] table;
	private int size;

	public SimpleHashMap() {

		table = (Entry<K, V>[]) new Entry[16];
	}

	public SimpleHashMap(int capacity) {
		
		table = (Entry<K, V>[]) new Entry[capacity];
	}

	public static void main(String[] args) {
		SimpleHashMap<Integer, Integer> test = new SimpleHashMap<Integer, Integer>();
		for (int i = 0; i < 10; i++) {
			test.put(i, i);
		}

		test.put(17, 2);
		test.put(33, 3);
		test.put(49, 4);

		System.out.println(test.show());

	}

	private String show() {
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < table.length; i++) {
			if (table[i] != null) {
				s.append(i + " " + table[i].toString());
				Entry<K, V> temp = table[i];
				while (temp.next != null) {
					s.append(" " + temp.next.toString());
					temp = (Entry<K, V>) temp.getNext();
				}
				s.append("\n");
			} else {
				s.append(i + "null\n");
			}

		}
		return s.toString();

	}

	@Override
	public int size() {
		return size;

	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	

	@Override
	public V get(Object o) {
		K key = (K) o;
		Entry<K, V> e = find(index(key), key);

		if (e != null) {
			return e.getValue();
		}

		return null;
	}

	@Override
	public V put(K key, V value) {

		int index = index(key);
		Entry<K, V> e = find(index, key);

		if (e != null) {
			return e.setValue(value);
		}

		e = new Entry<K, V>(key, value);

		if (table[index] != null) {
			e.next = table[index];
		}
		table[index] = e;
		size++;

		if ((double) size / table.length > 0.75) {
			rehash();
		}

		return null;
	}

	@SuppressWarnings("unchecked")
	private void rehash() {

		Entry<K, V>[] old = table;
		table = (Entry<K, V>[]) new Entry[old.length * 2];
		size = 0;

		for (int i = 0; i < old.length; i++) {
			Entry<K, V> e = old[i];

			while (e != null) {
				put(e.getKey(), e.getValue());
				e = e.next;

			}
		}
	}

	private Entry<K, V> find(int index, K key) {

		Entry<K, V> e = table[index];
		while (e != null) {
			if (e.getKey().equals(key)) {
				return e;
			}
			e = e.next;
		}
		return null;
	}

	private int index(K key) {

		return Math.abs(key.hashCode() % table.length);
	}

	@Override
	public V remove(Object o) {
		if (!isEmpty()) {

			@SuppressWarnings("unchecked")
			K key = (K) o;
			int index = index(key);

			Entry<K, V> toRemove = find(index, key);
			if (toRemove != null) {
				Entry<K, V> e = table[index];

				if (e.key.equals(key)) { // om key finns först i listan
					table[index] = e.next;
					size--;
					return e.value;

				}
				while (e.next != null) {
					if (e.next.key.equals(key)) {
						Entry<K, V> temp = e.next;
						e.next = e.next.next;
						size--;
						return temp.value;

					}
					e = e.next;
				}

			}

		}
		return null; // listan är tom eller key saknas
	}

	

	private static class Entry<K, V> implements Map.Entry<K, V> {
		private K key;
		private V value;
		private Entry<K, V> next;

		public Entry(K key, V value) {
			this.key = key;
			this.value = value;

		}

		public Entry<K, V> getNext() {
			return next;
		}

		@Override
		public String toString() {
			return this.key + " = " + this.value;
		}

		@Override
		public K getKey() {

			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			V oldValue = this.value;
			this.value = value;
			return oldValue;
		}

	}

}
